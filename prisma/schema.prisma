// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String         @db.VarChar(64)
  nip           String         @db.Char(18) @unique
  password      String         @db.VarChar(255)
  role          String         @default("employee") @db.VarChar(64)
  UserMeet      UserMeet[]
  UserProject   UserProject[]
  projectToLead Project[]      @relation("projectToLead")
  taskToDo      Task[]         @relation("taskToDo")
  TaskComment   TaskComment[]
  Notification  Notification[]
}

model Meet {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(128)
  startDate   DateTime   @db.DateTime
  endDate     DateTime   @db.DateTime
  duration    Int        @db.Int
  link        String     @db.VarChar(255)
  description String?    @db.LongText
  UserMeet    UserMeet[]
}

model UserMeet {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  meet   Meet @relation(fields: [meetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  meetId Int
}

model Project {
  id              Int           @id @default(autoincrement())
  title           String        @db.VarChar(128)
  startdate       DateTime      @db.Date
  enddate         DateTime      @db.Date
  description     String?       @db.LongText
  isArchived      Boolean       @db.TinyInt()
  projectLeader   User          @relation("projectToLead", fields: [projectLeaderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectLeaderId Int
  UserProject     UserProject[]
  Task            Task[]
}

model UserProject {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(128)
  duedate     DateTime      @db.Date
  priority    Int           @db.Int
  description String?       @db.LongText
  status      Int           @db.Int
  taskfile    String?       @db.VarChar(255)
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId   Int
  user        User          @relation("taskToDo", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  TaskComment TaskComment[]
}

model TaskComment {
  id      Int    @id @default(autoincrement())
  comment String @db.LongText
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId  Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  Int
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(128)
  message   String   @db.LongText
  type      String   @db.VarChar(24)
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false) @db.TinyInt()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
}
